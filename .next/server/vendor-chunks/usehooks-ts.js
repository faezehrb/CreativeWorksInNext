"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/usehooks-ts";
exports.ids = ["vendor-chunks/usehooks-ts"];
exports.modules = {

/***/ "(ssr)/./node_modules/usehooks-ts/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/usehooks-ts/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBoolean: () => (/* binding */ useBoolean),\n/* harmony export */   useClickAnyWhere: () => (/* binding */ useClickAnyWhere),\n/* harmony export */   useCopyToClipboard: () => (/* binding */ useCopyToClipboard),\n/* harmony export */   useCountdown: () => (/* binding */ useCountdown),\n/* harmony export */   useCounter: () => (/* binding */ useCounter),\n/* harmony export */   useDarkMode: () => (/* binding */ useDarkMode),\n/* harmony export */   useDebounce: () => (/* binding */ useDebounce),\n/* harmony export */   useDebounceCallback: () => (/* binding */ useDebounceCallback),\n/* harmony export */   useDebounceValue: () => (/* binding */ useDebounceValue),\n/* harmony export */   useDocumentTitle: () => (/* binding */ useDocumentTitle),\n/* harmony export */   useEffectOnce: () => (/* binding */ useEffectOnce),\n/* harmony export */   useElementSize: () => (/* binding */ useElementSize),\n/* harmony export */   useEventCallback: () => (/* binding */ useEventCallback),\n/* harmony export */   useEventListener: () => (/* binding */ useEventListener),\n/* harmony export */   useFetch: () => (/* binding */ useFetch),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useImageOnLoad: () => (/* binding */ useImageOnLoad),\n/* harmony export */   useIntersectionObserver: () => (/* binding */ useIntersectionObserver),\n/* harmony export */   useInterval: () => (/* binding */ useInterval),\n/* harmony export */   useIsClient: () => (/* binding */ useIsClient),\n/* harmony export */   useIsFirstRender: () => (/* binding */ useIsFirstRender),\n/* harmony export */   useIsMounted: () => (/* binding */ useIsMounted),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   useLocalStorage: () => (/* binding */ useLocalStorage),\n/* harmony export */   useLockedBody: () => (/* binding */ useLockedBody),\n/* harmony export */   useMap: () => (/* binding */ useMap),\n/* harmony export */   useMediaQuery: () => (/* binding */ useMediaQuery),\n/* harmony export */   useOnClickOutside: () => (/* binding */ useOnClickOutside),\n/* harmony export */   useReadLocalStorage: () => (/* binding */ useReadLocalStorage),\n/* harmony export */   useResizeObserver: () => (/* binding */ useResizeObserver),\n/* harmony export */   useScreen: () => (/* binding */ useScreen),\n/* harmony export */   useScript: () => (/* binding */ useScript),\n/* harmony export */   useScrollLock: () => (/* binding */ useScrollLock),\n/* harmony export */   useSessionStorage: () => (/* binding */ useSessionStorage),\n/* harmony export */   useSsr: () => (/* binding */ useSsr),\n/* harmony export */   useStep: () => (/* binding */ useStep),\n/* harmony export */   useTernaryDarkMode: () => (/* binding */ useTernaryDarkMode),\n/* harmony export */   useTimeout: () => (/* binding */ useTimeout),\n/* harmony export */   useToggle: () => (/* binding */ useToggle),\n/* harmony export */   useUnmount: () => (/* binding */ useUnmount),\n/* harmony export */   useUpdateEffect: () => (/* binding */ useUpdateEffect),\n/* harmony export */   useWindowSize: () => (/* binding */ useWindowSize)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.debounce */ \"(ssr)/./node_modules/lodash.debounce/index.js\");\n\n\n// src/useBoolean/useBoolean.ts\nfunction useBoolean(defaultValue) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!!defaultValue);\n    const setTrue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setValue(true);\n    }, []);\n    const setFalse = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setValue(false);\n    }, []);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setValue((x)=>!x);\n    }, []);\n    return {\n        value,\n        setValue,\n        setTrue,\n        setFalse,\n        toggle\n    };\n}\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n// src/useEventListener/useEventListener.ts\nfunction useEventListener(eventName, handler, element, options) {\n    const savedHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(handler);\n    useIsomorphicLayoutEffect(()=>{\n        savedHandler.current = handler;\n    }, [\n        handler\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const targetElement = (element == null ? void 0 : element.current) ?? window;\n        if (!(targetElement && targetElement.addEventListener)) return;\n        const listener = (event)=>{\n            savedHandler.current(event);\n        };\n        targetElement.addEventListener(eventName, listener, options);\n        return ()=>{\n            targetElement.removeEventListener(eventName, listener, options);\n        };\n    }, [\n        eventName,\n        element,\n        options\n    ]);\n}\n// src/useClickAnyWhere/useClickAnyWhere.ts\nfunction useClickAnyWhere(handler) {\n    useEventListener(\"click\", (event)=>{\n        handler(event);\n    });\n}\nfunction useCopyToClipboard() {\n    const [copiedText, setCopiedText] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const copy = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (text)=>{\n        if (!(navigator == null ? void 0 : navigator.clipboard)) {\n            console.warn(\"Clipboard not supported\");\n            return false;\n        }\n        try {\n            await navigator.clipboard.writeText(text);\n            setCopiedText(text);\n            return true;\n        } catch (error) {\n            console.warn(\"Copy failed\", error);\n            setCopiedText(null);\n            return false;\n        }\n    }, []);\n    return [\n        copiedText,\n        copy\n    ];\n}\nfunction useCounter(initialValue) {\n    const [count, setCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialValue ?? 0);\n    const increment = ()=>{\n        setCount((x)=>x + 1);\n    };\n    const decrement = ()=>{\n        setCount((x)=>x - 1);\n    };\n    const reset = ()=>{\n        setCount(initialValue ?? 0);\n    };\n    return {\n        count,\n        increment,\n        decrement,\n        reset,\n        setCount\n    };\n}\nfunction useInterval(callback, delay) {\n    const savedCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    useIsomorphicLayoutEffect(()=>{\n        savedCallback.current = callback;\n    }, [\n        callback\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (delay === null) {\n            return;\n        }\n        const id = setInterval(()=>{\n            savedCallback.current();\n        }, delay);\n        return ()=>{\n            clearInterval(id);\n        };\n    }, [\n        delay\n    ]);\n}\n// src/useCountdown/useCountdown.ts\nfunction useCountdown(countdownOptions) {\n    let isDeprecated = false;\n    let countStart, intervalMs, isIncrement, countStop;\n    if (\"seconds\" in countdownOptions) {\n        console.warn(\"[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.\");\n        isDeprecated = true;\n        countStart = countdownOptions.seconds;\n        intervalMs = countdownOptions.interval;\n        isIncrement = countdownOptions.isIncrement;\n    } else {\n        ({ countStart, intervalMs, isIncrement, countStop } = countdownOptions);\n    }\n    intervalMs = intervalMs ?? 1e3;\n    isIncrement = isIncrement ?? false;\n    countStop = countStop ?? 0;\n    const { count, increment, decrement, reset: resetCounter } = useCounter(countStart);\n    const { value: isCountdownRunning, setTrue: startCountdown, setFalse: stopCountdown } = useBoolean(false);\n    const resetCountdown = ()=>{\n        stopCountdown();\n        resetCounter();\n    };\n    const countdownCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (count === countStop) {\n            stopCountdown();\n            return;\n        }\n        if (isIncrement) {\n            increment();\n        } else {\n            decrement();\n        }\n    }, [\n        count,\n        countStop,\n        decrement,\n        increment,\n        isIncrement,\n        stopCountdown\n    ]);\n    useInterval(countdownCallback, isCountdownRunning ? intervalMs : null);\n    return isDeprecated ? [\n        count,\n        {\n            start: startCountdown,\n            stop: stopCountdown,\n            reset: resetCountdown\n        }\n    ] : [\n        count,\n        {\n            startCountdown,\n            stopCountdown,\n            resetCountdown\n        }\n    ];\n}\nfunction useEventCallback(fn) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(()=>{\n        throw new Error(\"Cannot call an event handler while rendering.\");\n    });\n    useIsomorphicLayoutEffect(()=>{\n        ref.current = fn;\n    }, [\n        fn\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>ref.current(...args), [\n        ref\n    ]);\n}\n// src/useLocalStorage/useLocalStorage.ts\nvar IS_SERVER = \"undefined\" === \"undefined\";\nfunction useLocalStorage(key, initialValue, options = {}) {\n    const { initializeWithValue = true } = options;\n    const serializer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (options.serializer) {\n            return options.serializer(value);\n        }\n        return JSON.stringify(value);\n    }, [\n        options\n    ]);\n    const deserializer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (options.deserializer) {\n            return options.deserializer(value);\n        }\n        if (value === \"undefined\") {\n            return void 0;\n        }\n        const defaultValue = initialValue instanceof Function ? initialValue() : initialValue;\n        let parsed;\n        try {\n            parsed = JSON.parse(value);\n        } catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n            return defaultValue;\n        }\n        return parsed;\n    }, [\n        options,\n        initialValue\n    ]);\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const initialValueToUse = initialValue instanceof Function ? initialValue() : initialValue;\n        if (IS_SERVER) {\n            return initialValueToUse;\n        }\n        try {\n            const raw = window.localStorage.getItem(key);\n            return raw ? deserializer(raw) : initialValueToUse;\n        } catch (error) {\n            console.warn(`Error reading localStorage key \\u201C${key}\\u201D:`, error);\n            return initialValueToUse;\n        }\n    }, [\n        initialValue,\n        key,\n        deserializer\n    ]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return readValue();\n        }\n        return initialValue instanceof Function ? initialValue() : initialValue;\n    });\n    const setValue = useEventCallback((value)=>{\n        if (IS_SERVER) {\n            console.warn(`Tried setting localStorage key \\u201C${key}\\u201D even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(readValue()) : value;\n            window.localStorage.setItem(key, serializer(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new StorageEvent(\"local-storage\", {\n                key\n            }));\n        } catch (error) {\n            console.warn(`Error setting localStorage key \\u201C${key}\\u201D:`, error);\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setStoredValue(readValue());\n    }, [\n        key\n    ]);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if ((event == null ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [\n        key,\n        readValue\n    ]);\n    useEventListener(\"storage\", handleStorageChange);\n    useEventListener(\"local-storage\", handleStorageChange);\n    return [\n        storedValue,\n        setValue\n    ];\n}\nvar IS_SERVER2 = \"undefined\" === \"undefined\";\nfunction useMediaQuery(query, options) {\n    const defaultValue = typeof options === \"boolean\" ? options : (options == null ? void 0 : options.defaultValue) ?? false;\n    const initializeWithValue = typeof options === \"boolean\" ? void 0 : (options == null ? void 0 : options.initializeWithValue) ?? void 0;\n    const getMatches = (query2)=>{\n        if (IS_SERVER2) {\n            return defaultValue;\n        }\n        return window.matchMedia(query2).matches;\n    };\n    const [matches, setMatches] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return getMatches(query);\n        }\n        return defaultValue;\n    });\n    function handleChange() {\n        setMatches(getMatches(query));\n    }\n    useIsomorphicLayoutEffect(()=>{\n        const matchMedia = window.matchMedia(query);\n        handleChange();\n        if (matchMedia.addListener) {\n            matchMedia.addListener(handleChange);\n        } else {\n            matchMedia.addEventListener(\"change\", handleChange);\n        }\n        return ()=>{\n            if (matchMedia.removeListener) {\n                matchMedia.removeListener(handleChange);\n            } else {\n                matchMedia.removeEventListener(\"change\", handleChange);\n            }\n        };\n    }, [\n        query\n    ]);\n    return matches;\n}\n// src/useDarkMode/useDarkMode.ts\nvar COLOR_SCHEME_QUERY = \"(prefers-color-scheme: dark)\";\nvar LOCAL_STORAGE_KEY = \"usehooks-ts-dark-mode\";\nfunction useDarkMode(options, localStorageKeyProps = LOCAL_STORAGE_KEY) {\n    const counter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    counter.current++;\n    const defaultValue = typeof options === \"boolean\" ? options : options == null ? void 0 : options.defaultValue;\n    const localStorageKey = typeof options === \"boolean\" ? localStorageKeyProps ?? LOCAL_STORAGE_KEY : (options == null ? void 0 : options.localStorageKey) ?? LOCAL_STORAGE_KEY;\n    const initializeWithValue = typeof options === \"boolean\" ? void 0 : (options == null ? void 0 : options.initializeWithValue) ?? void 0;\n    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY, {\n        initializeWithValue,\n        defaultValue\n    });\n    const [isDarkMode, setDarkMode] = useLocalStorage(localStorageKey, defaultValue ?? isDarkOS ?? false, {\n        initializeWithValue\n    });\n    useIsomorphicLayoutEffect(()=>{\n        if (isDarkOS !== isDarkMode) {\n            setDarkMode(isDarkOS);\n        }\n    }, [\n        isDarkOS\n    ]);\n    return {\n        isDarkMode,\n        toggle: ()=>{\n            setDarkMode((prev)=>!prev);\n        },\n        enable: ()=>{\n            setDarkMode(true);\n        },\n        disable: ()=>{\n            setDarkMode(false);\n        },\n        set: (value)=>{\n            setDarkMode(value);\n        }\n    };\n}\nfunction useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const timer = setTimeout(()=>{\n            setDebouncedValue(value);\n        }, delay ?? 500);\n        return ()=>{\n            clearTimeout(timer);\n        };\n    }, [\n        value,\n        delay\n    ]);\n    return debouncedValue;\n}\nfunction useUnmount(func) {\n    const funcRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(func);\n    funcRef.current = func;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            funcRef.current();\n        }, []);\n}\n// src/useDebounceCallback/useDebounceCallback.ts\nfunction useDebounceCallback(func, delay = 500, options) {\n    const debouncedFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    useUnmount(()=>{\n        if (debouncedFunc.current) {\n            debouncedFunc.current.cancel();\n        }\n    });\n    const debounced = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const debouncedFuncInstance = lodash_debounce__WEBPACK_IMPORTED_MODULE_1__(func, delay, options);\n        const wrappedFunc = (...args)=>{\n            return debouncedFuncInstance(...args);\n        };\n        wrappedFunc.cancel = ()=>{\n            debouncedFuncInstance.cancel();\n        };\n        wrappedFunc.isPending = ()=>{\n            return !!debouncedFunc.current;\n        };\n        wrappedFunc.flush = ()=>{\n            return debouncedFuncInstance.flush();\n        };\n        return wrappedFunc;\n    }, [\n        func,\n        delay,\n        options\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        debouncedFunc.current = lodash_debounce__WEBPACK_IMPORTED_MODULE_1__(func, delay, options);\n    }, [\n        func,\n        delay,\n        options\n    ]);\n    return debounced;\n}\nfunction useDebounceValue(initialValue, delay, options) {\n    const eq = (options == null ? void 0 : options.equalityFn) ?? ((left, right)=>left === right);\n    const unwrappedInitialValue = initialValue instanceof Function ? initialValue() : initialValue;\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(unwrappedInitialValue);\n    const previousValueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(unwrappedInitialValue);\n    const updateDebouncedValue = useDebounceCallback(setDebouncedValue, delay, options);\n    if (!eq(previousValueRef.current, unwrappedInitialValue)) {\n        updateDebouncedValue(unwrappedInitialValue);\n        previousValueRef.current = unwrappedInitialValue;\n    }\n    return [\n        debouncedValue,\n        updateDebouncedValue\n    ];\n}\nfunction useDocumentTitle(title, options = {}) {\n    const { preserveTitleOnUnmount = true } = options;\n    const defaultTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    useIsomorphicLayoutEffect(()=>{\n        defaultTitle.current = window.document.title;\n    }, []);\n    useIsomorphicLayoutEffect(()=>{\n        window.document.title = title;\n    }, [\n        title\n    ]);\n    useUnmount(()=>{\n        if (!preserveTitleOnUnmount && defaultTitle.current) {\n            window.document.title = defaultTitle.current;\n        }\n    });\n}\nfunction useEffectOnce(effect) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, []);\n}\nfunction useElementSize(options = {}) {\n    const { initializeWithValue = true } = options;\n    const [ref, setRef] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return {\n            width: (ref == null ? void 0 : ref.offsetWidth) ?? void 0,\n            height: (ref == null ? void 0 : ref.offsetHeight) ?? void 0\n        };\n    }, [\n        ref == null ? void 0 : ref.offsetHeight,\n        ref == null ? void 0 : ref.offsetWidth\n    ]);\n    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return readValue();\n        }\n        return {\n            width: void 0,\n            height: void 0\n        };\n    });\n    const handleSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setSize(readValue());\n    }, [\n        ref == null ? void 0 : ref.offsetHeight,\n        ref == null ? void 0 : ref.offsetWidth\n    ]);\n    useEventListener(\"resize\", handleSize);\n    useIsomorphicLayoutEffect(()=>{\n        handleSize();\n    }, [\n        ref == null ? void 0 : ref.offsetHeight,\n        ref == null ? void 0 : ref.offsetWidth\n    ]);\n    const result = [\n        setRef,\n        size\n    ];\n    result.ref = result[0];\n    result.width = size.width;\n    result.height = size.height;\n    return result;\n}\nfunction useFetch(url, options) {\n    const cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const cancelRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const initialState = {\n        error: void 0,\n        data: void 0\n    };\n    const fetchReducer = (state2, action)=>{\n        switch(action.type){\n            case \"loading\":\n                return {\n                    ...initialState\n                };\n            case \"fetched\":\n                return {\n                    ...initialState,\n                    data: action.payload\n                };\n            case \"error\":\n                return {\n                    ...initialState,\n                    error: action.payload\n                };\n            default:\n                return state2;\n        }\n    };\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(fetchReducer, initialState);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!url) return;\n        cancelRequest.current = false;\n        const fetchData = async ()=>{\n            dispatch({\n                type: \"loading\"\n            });\n            const currentCache = cache.current[url];\n            if (currentCache) {\n                dispatch({\n                    type: \"fetched\",\n                    payload: currentCache\n                });\n                return;\n            }\n            try {\n                const response = await fetch(url, options);\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                const data = await response.json();\n                cache.current[url] = data;\n                if (cancelRequest.current) return;\n                dispatch({\n                    type: \"fetched\",\n                    payload: data\n                });\n            } catch (error) {\n                if (cancelRequest.current) return;\n                dispatch({\n                    type: \"error\",\n                    payload: error\n                });\n            }\n        };\n        void fetchData();\n        return ()=>{\n            cancelRequest.current = true;\n        };\n    }, [\n        url\n    ]);\n    return state;\n}\nfunction useHover(elementRef) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleMouseEnter = ()=>{\n        setValue(true);\n    };\n    const handleMouseLeave = ()=>{\n        setValue(false);\n    };\n    useEventListener(\"mouseenter\", handleMouseEnter, elementRef);\n    useEventListener(\"mouseleave\", handleMouseLeave, elementRef);\n    return value;\n}\nfunction useImageOnLoad() {\n    const [isLoaded, setIsLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const handleImageOnLoad = ()=>{\n        setIsLoaded(true);\n    };\n    const css = {\n        // Thumbnail style.\n        thumbnail: {\n            visibility: isLoaded ? \"hidden\" : \"visible\",\n            filter: \"blur(8px)\",\n            transition: \"visibility 0ms ease-out 500ms\"\n        },\n        // Full image style.\n        fullSize: {\n            opacity: isLoaded ? 1 : 0,\n            transition: \"opacity 500ms ease-in 0ms\"\n        }\n    };\n    return {\n        handleImageOnLoad,\n        css\n    };\n}\nfunction useIntersectionObserver(optionsOrLegacyRef, legacyOptions) {\n    var _a;\n    const isLegacySignature = \"current\" in optionsOrLegacyRef;\n    const options = isLegacySignature ? legacyOptions : optionsOrLegacyRef;\n    const { threshold = 0, root = null, rootMargin = \"0%\", freezeOnceVisible = false, initialIsIntersecting = false } = options ?? {};\n    const [newRef, setNewRef] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const ref = isLegacySignature ? optionsOrLegacyRef.current : newRef;\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            isIntersecting: initialIsIntersecting,\n            entry: void 0\n        }));\n    const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    callbackRef.current = options == null ? void 0 : options.onChange;\n    const frozen = ((_a = state.entry) == null ? void 0 : _a.isIntersecting) && freezeOnceVisible;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ref) return;\n        if (!(\"IntersectionObserver\" in window)) return;\n        if (frozen) return;\n        let unobserve;\n        const observer = new IntersectionObserver((entries)=>{\n            const thresholds = Array.isArray(observer.thresholds) ? observer.thresholds : [\n                observer.thresholds\n            ];\n            entries.forEach((entry)=>{\n                const isIntersecting = entry.isIntersecting && thresholds.some((threshold2)=>entry.intersectionRatio >= threshold2);\n                setState({\n                    isIntersecting,\n                    entry\n                });\n                if (callbackRef.current) {\n                    callbackRef.current(isIntersecting, entry);\n                }\n                if (isIntersecting && freezeOnceVisible && unobserve) {\n                    unobserve();\n                    unobserve = void 0;\n                }\n            });\n        }, {\n            threshold,\n            root,\n            rootMargin\n        });\n        observer.observe(ref);\n        return ()=>{\n            observer.disconnect();\n        };\n    }, [\n        ref,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify(threshold),\n        root,\n        rootMargin,\n        frozen,\n        freezeOnceVisible\n    ]);\n    const prevRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a2;\n        if (!ref && ((_a2 = state.entry) == null ? void 0 : _a2.target) && !freezeOnceVisible && !frozen && prevRef.current !== state.entry.target) {\n            prevRef.current = state.entry.target;\n            setState({\n                isIntersecting: initialIsIntersecting,\n                entry: void 0\n            });\n        }\n    }, [\n        ref,\n        state.entry,\n        freezeOnceVisible,\n        frozen,\n        initialIsIntersecting\n    ]);\n    if (isLegacySignature) {\n        return state.entry;\n    }\n    const result = [\n        setNewRef,\n        !!state.isIntersecting,\n        state.entry\n    ];\n    result.ref = result[0];\n    result.isIntersecting = result[1];\n    result.entry = result[2];\n    return result;\n}\nfunction useIsClient() {\n    const [isClient, setClient] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setClient(true);\n    }, []);\n    return isClient;\n}\nfunction useIsFirstRender() {\n    const isFirst = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\nfunction useIsMounted() {\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>isMounted.current, []);\n}\nfunction useLockedBody(initialLocked = false, rootId = \"___gatsby\") {\n    const [locked, setLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialLocked);\n    useIsomorphicLayoutEffect(()=>{\n        if (!locked) {\n            return;\n        }\n        const originalOverflow = document.body.style.overflow;\n        const originalPaddingRight = document.body.style.paddingRight;\n        document.body.style.overflow = \"hidden\";\n        const root = document.getElementById(rootId);\n        const scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;\n        if (scrollBarWidth) {\n            document.body.style.paddingRight = `${scrollBarWidth}px`;\n        }\n        return ()=>{\n            document.body.style.overflow = originalOverflow;\n            if (scrollBarWidth) {\n                document.body.style.paddingRight = originalPaddingRight;\n            }\n        };\n    }, [\n        locked\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (locked !== initialLocked) {\n            setLocked(initialLocked);\n        }\n    }, [\n        initialLocked\n    ]);\n    return [\n        locked,\n        setLocked\n    ];\n}\nfunction useMap(initialState = /* @__PURE__ */ new Map()) {\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new Map(initialState));\n    const actions = {\n        set: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((key, value)=>{\n            setMap((prev)=>{\n                const copy = new Map(prev);\n                copy.set(key, value);\n                return copy;\n            });\n        }, []),\n        setAll: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((entries)=>{\n            setMap(()=>new Map(entries));\n        }, []),\n        remove: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((key)=>{\n            setMap((prev)=>{\n                const copy = new Map(prev);\n                copy.delete(key);\n                return copy;\n            });\n        }, []),\n        reset: (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n            setMap(()=>/* @__PURE__ */ new Map());\n        }, [])\n    };\n    return [\n        map,\n        actions\n    ];\n}\n// src/useOnClickOutside/useOnClickOutside.ts\nfunction useOnClickOutside(ref, handler, eventType = \"mousedown\") {\n    useEventListener(eventType, (event)=>{\n        const target = event.target;\n        if (!target || !target.isConnected) {\n            return;\n        }\n        const isOutside = Array.isArray(ref) ? ref.every((r)=>r.current && !r.current.contains(target)) : ref.current && !ref.current.contains(target);\n        if (isOutside) {\n            handler(event);\n        }\n    });\n}\nvar IS_SERVER3 = \"undefined\" === \"undefined\";\nfunction useReadLocalStorage(key, options = {}) {\n    let { initializeWithValue = true } = options;\n    if (IS_SERVER3) {\n        initializeWithValue = false;\n    }\n    const deserializer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (options.deserializer) {\n            return options.deserializer(value);\n        }\n        if (value === \"undefined\") {\n            return void 0;\n        }\n        let parsed;\n        try {\n            parsed = JSON.parse(value);\n        } catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n            return null;\n        }\n        return parsed;\n    }, [\n        options\n    ]);\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (IS_SERVER3) {\n            return null;\n        }\n        try {\n            const raw = window.localStorage.getItem(key);\n            return raw ? deserializer(raw) : null;\n        } catch (error) {\n            console.warn(`Error reading localStorage key \\u201C${key}\\u201D:`, error);\n            return null;\n        }\n    }, [\n        key,\n        deserializer\n    ]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return readValue();\n        }\n        return void 0;\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setStoredValue(readValue());\n    }, [\n        key\n    ]);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if ((event == null ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [\n        key,\n        readValue\n    ]);\n    useEventListener(\"storage\", handleStorageChange);\n    useEventListener(\"local-storage\", handleStorageChange);\n    return storedValue;\n}\nvar initialSize = {\n    width: void 0,\n    height: void 0\n};\nfunction useResizeObserver(options) {\n    const { ref, box = \"content-box\" } = options;\n    const [{ width, height }, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialSize);\n    const isMounted = useIsMounted();\n    const previousSize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        ...initialSize\n    });\n    const onResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n    onResize.current = options == null ? void 0 : options.onResize;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(ref == null ? void 0 : ref.current)) return;\n        if (true) return;\n        const observer = new ResizeObserver(([entry])=>{\n            const boxProp = box === \"border-box\" ? \"borderBoxSize\" : box === \"device-pixel-content-box\" ? \"devicePixelContentBoxSize\" : \"contentBoxSize\";\n            const newWidth = extractSize(entry, boxProp, \"inlineSize\");\n            const newHeight = extractSize(entry, boxProp, \"blockSize\");\n            const hasChanged = previousSize.current.width !== newWidth || previousSize.current.height !== newHeight;\n            if (hasChanged) {\n                const newSize = {\n                    width: newWidth,\n                    height: newHeight\n                };\n                previousSize.current.width = newWidth;\n                previousSize.current.height = newHeight;\n                if (onResize == null ? void 0 : onResize.current) {\n                    onResize.current(newSize);\n                } else {\n                    if (isMounted()) {\n                        setSize(newSize);\n                    }\n                }\n            }\n        });\n        observer.observe(ref.current, {\n            box\n        });\n        return ()=>{\n            observer.disconnect();\n        };\n    }, [\n        box,\n        ref,\n        isMounted\n    ]);\n    return {\n        width,\n        height\n    };\n}\nfunction extractSize(entry, box, sizeType) {\n    if (!entry[box]) {\n        if (box === \"contentBoxSize\") {\n            return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n        }\n        return void 0;\n    }\n    return Array.isArray(entry[box]) ? entry[box][0][sizeType] : // @ts-ignore Support Firefox's non-standard behavior\n    entry[box][sizeType];\n}\nvar IS_SERVER4 = \"undefined\" === \"undefined\";\nfunction useScreen(options = {}) {\n    let { initializeWithValue = true } = options;\n    if (IS_SERVER4) {\n        initializeWithValue = false;\n    }\n    const readScreen = ()=>{\n        if (IS_SERVER4) {\n            return void 0;\n        }\n        return window.screen;\n    };\n    const [screen, setScreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return readScreen();\n        }\n        return void 0;\n    });\n    const debouncedSetScreen = useDebounceCallback(setScreen, options == null ? void 0 : options.debounceDelay);\n    function handleSize() {\n        const newScreen = readScreen();\n        const setSize = (options == null ? void 0 : options.debounceDelay) ? debouncedSetScreen : setScreen;\n        if (newScreen) {\n            const { width, height, availHeight, availWidth, colorDepth, orientation, pixelDepth } = newScreen;\n            setSize({\n                width,\n                height,\n                availHeight,\n                availWidth,\n                colorDepth,\n                orientation,\n                pixelDepth\n            });\n        }\n    }\n    useEventListener(\"resize\", handleSize);\n    useIsomorphicLayoutEffect(()=>{\n        handleSize();\n    }, []);\n    return screen;\n}\nvar cachedScriptStatuses = /* @__PURE__ */ new Map();\nfunction getScriptNode(src) {\n    const node = document.querySelector(`script[src=\"${src}\"]`);\n    const status = node == null ? void 0 : node.getAttribute(\"data-status\");\n    return {\n        node,\n        status\n    };\n}\nfunction useScript(src, options) {\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (!src || (options == null ? void 0 : options.shouldPreventLoad)) {\n            return \"idle\";\n        }\n        if (true) {\n            return \"loading\";\n        }\n        return cachedScriptStatuses.get(src) ?? \"loading\";\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!src || (options == null ? void 0 : options.shouldPreventLoad)) {\n            return;\n        }\n        const cachedScriptStatus = cachedScriptStatuses.get(src);\n        if (cachedScriptStatus === \"ready\" || cachedScriptStatus === \"error\") {\n            setStatus(cachedScriptStatus);\n            return;\n        }\n        const script = getScriptNode(src);\n        let scriptNode = script.node;\n        if (!scriptNode) {\n            scriptNode = document.createElement(\"script\");\n            scriptNode.src = src;\n            scriptNode.async = true;\n            scriptNode.setAttribute(\"data-status\", \"loading\");\n            document.body.appendChild(scriptNode);\n            const setAttributeFromEvent = (event)=>{\n                const scriptStatus = event.type === \"load\" ? \"ready\" : \"error\";\n                scriptNode == null ? void 0 : scriptNode.setAttribute(\"data-status\", scriptStatus);\n            };\n            scriptNode.addEventListener(\"load\", setAttributeFromEvent);\n            scriptNode.addEventListener(\"error\", setAttributeFromEvent);\n        } else {\n            setStatus(script.status ?? cachedScriptStatus ?? \"loading\");\n        }\n        const setStateFromEvent = (event)=>{\n            const newStatus = event.type === \"load\" ? \"ready\" : \"error\";\n            setStatus(newStatus);\n            cachedScriptStatuses.set(src, newStatus);\n        };\n        scriptNode.addEventListener(\"load\", setStateFromEvent);\n        scriptNode.addEventListener(\"error\", setStateFromEvent);\n        return ()=>{\n            if (scriptNode) {\n                scriptNode.removeEventListener(\"load\", setStateFromEvent);\n                scriptNode.removeEventListener(\"error\", setStateFromEvent);\n            }\n            if (scriptNode && (options == null ? void 0 : options.removeOnUnmount)) {\n                scriptNode.remove();\n                cachedScriptStatuses.delete(src);\n            }\n        };\n    }, [\n        src,\n        options == null ? void 0 : options.shouldPreventLoad,\n        options == null ? void 0 : options.removeOnUnmount\n    ]);\n    return status;\n}\nvar IS_SERVER5 = \"undefined\" === \"undefined\";\nfunction useScrollLock(options = {}) {\n    const { autoLock = true, lockTarget, widthReflow = true } = options;\n    const target = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const originalStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const lock = ()=>{\n        if (target.current) {\n            const { overflow, paddingRight } = window.getComputedStyle(target.current);\n            originalStyle.current = {\n                overflow,\n                paddingRight\n            };\n            target.current.style.overflow = \"hidden\";\n            if (widthReflow) {\n                const scrollbarWidth = target.current.offsetWidth - target.current.scrollWidth;\n                target.current.style.paddingRight = `${scrollbarWidth}px`;\n            }\n        }\n    };\n    const unlock = ()=>{\n        if (target.current && originalStyle.current) {\n            target.current.style.overflow = originalStyle.current.overflow;\n            target.current.style.paddingRight = originalStyle.current.paddingRight;\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (IS_SERVER5) return;\n        if (lockTarget) {\n            target.current = typeof lockTarget === \"string\" ? document.querySelector(lockTarget) : lockTarget;\n        }\n        if (!target.current) {\n            target.current = document.body;\n        }\n        if (autoLock) {\n            lock();\n        }\n        return ()=>{\n            unlock();\n        };\n    }, [\n        autoLock,\n        lockTarget,\n        widthReflow\n    ]);\n    return {\n        lock,\n        unlock\n    };\n}\nvar IS_SERVER6 = \"undefined\" === \"undefined\";\nfunction useSessionStorage(key, initialValue, options = {}) {\n    const { initializeWithValue = true } = options;\n    const serializer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (options.serializer) {\n            return options.serializer(value);\n        }\n        return JSON.stringify(value);\n    }, [\n        options\n    ]);\n    const deserializer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (options.deserializer) {\n            return options.deserializer(value);\n        }\n        if (value === \"undefined\") {\n            return void 0;\n        }\n        const defaultValue = initialValue instanceof Function ? initialValue() : initialValue;\n        let parsed;\n        try {\n            parsed = JSON.parse(value);\n        } catch (error) {\n            console.error(\"Error parsing JSON:\", error);\n            return defaultValue;\n        }\n        return parsed;\n    }, [\n        options,\n        initialValue\n    ]);\n    const readValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const initialValueToUse = initialValue instanceof Function ? initialValue() : initialValue;\n        if (IS_SERVER6) {\n            return initialValueToUse;\n        }\n        try {\n            const raw = window.sessionStorage.getItem(key);\n            return raw ? deserializer(raw) : initialValueToUse;\n        } catch (error) {\n            console.warn(`Error reading sessionStorage key \\u201C${key}\\u201D:`, error);\n            return initialValueToUse;\n        }\n    }, [\n        initialValue,\n        key,\n        deserializer\n    ]);\n    const [storedValue, setStoredValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return readValue();\n        }\n        return initialValue instanceof Function ? initialValue() : initialValue;\n    });\n    const setValue = useEventCallback((value)=>{\n        if (IS_SERVER6) {\n            console.warn(`Tried setting sessionStorage key \\u201C${key}\\u201D even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(readValue()) : value;\n            window.sessionStorage.setItem(key, serializer(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new StorageEvent(\"session-storage\", {\n                key\n            }));\n        } catch (error) {\n            console.warn(`Error setting sessionStorage key \\u201C${key}\\u201D:`, error);\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setStoredValue(readValue());\n    }, [\n        key\n    ]);\n    const handleStorageChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if ((event == null ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [\n        key,\n        readValue\n    ]);\n    useEventListener(\"storage\", handleStorageChange);\n    useEventListener(\"session-storage\", handleStorageChange);\n    return [\n        storedValue,\n        setValue\n    ];\n}\n// src/useSsr/useSsr.ts\nfunction useSsr() {\n    var _a;\n    const isDOM = // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n     false && 0;\n    return {\n        isBrowser: isDOM,\n        isServer: !isDOM\n    };\n}\nfunction useStep(maxStep) {\n    const [currentStep, setCurrentStep] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const canGoToNextStep = currentStep + 1 <= maxStep;\n    const canGoToPrevStep = currentStep - 1 > 0;\n    const setStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((step)=>{\n        const newStep = step instanceof Function ? step(currentStep) : step;\n        if (newStep >= 1 && newStep <= maxStep) {\n            setCurrentStep(newStep);\n            return;\n        }\n        throw new Error(\"Step not valid\");\n    }, [\n        maxStep,\n        currentStep\n    ]);\n    const goToNextStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (canGoToNextStep) {\n            setCurrentStep((step)=>step + 1);\n        }\n    }, [\n        canGoToNextStep\n    ]);\n    const goToPrevStep = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (canGoToPrevStep) {\n            setCurrentStep((step)=>step - 1);\n        }\n    }, [\n        canGoToPrevStep\n    ]);\n    const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setCurrentStep(1);\n    }, []);\n    return [\n        currentStep,\n        {\n            goToNextStep,\n            goToPrevStep,\n            canGoToNextStep,\n            canGoToPrevStep,\n            setStep,\n            reset\n        }\n    ];\n}\n// src/useTernaryDarkMode/useTernaryDarkMode.ts\nvar COLOR_SCHEME_QUERY2 = \"(prefers-color-scheme: dark)\";\nvar LOCAL_STORAGE_KEY2 = \"usehooks-ts-ternary-dark-mode\";\nfunction useTernaryDarkMode(options) {\n    const defaultValue = typeof options === \"string\" ? \"system\" : (options == null ? void 0 : options.defaultValue) ?? \"system\";\n    const localStorageKey = typeof options === \"string\" ? options : (options == null ? void 0 : options.localStorageKey) ?? LOCAL_STORAGE_KEY2;\n    const initializeWithValue = typeof options === \"string\" ? void 0 : (options == null ? void 0 : options.initializeWithValue) ?? void 0;\n    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY2, {\n        initializeWithValue\n    });\n    const [mode, setMode] = useLocalStorage(localStorageKey, defaultValue, {\n        initializeWithValue\n    });\n    const isDarkMode = mode === \"dark\" || mode === \"system\" && isDarkOS;\n    const toggleTernaryDarkMode = ()=>{\n        const modes = [\n            \"light\",\n            \"system\",\n            \"dark\"\n        ];\n        setMode((prevMode)=>{\n            const nextIndex = (modes.indexOf(prevMode) + 1) % modes.length;\n            return modes[nextIndex];\n        });\n    };\n    return {\n        isDarkMode,\n        ternaryDarkMode: mode,\n        setTernaryDarkMode: setMode,\n        toggleTernaryDarkMode\n    };\n}\nfunction useTimeout(callback, delay) {\n    const savedCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n    useIsomorphicLayoutEffect(()=>{\n        savedCallback.current = callback;\n    }, [\n        callback\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!delay && delay !== 0) {\n            return;\n        }\n        const id = setTimeout(()=>{\n            savedCallback.current();\n        }, delay);\n        return ()=>{\n            clearTimeout(id);\n        };\n    }, [\n        delay\n    ]);\n}\nfunction useToggle(defaultValue) {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!!defaultValue);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setValue((x)=>!x);\n    }, []);\n    return [\n        value,\n        toggle,\n        setValue\n    ];\n}\nfunction useUpdateEffect(effect, deps) {\n    const isFirst = useIsFirstRender();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isFirst) {\n            return effect();\n        }\n    }, deps);\n}\nvar IS_SERVER7 = \"undefined\" === \"undefined\";\nfunction useWindowSize(options = {}) {\n    let { initializeWithValue = true } = options;\n    if (IS_SERVER7) {\n        initializeWithValue = false;\n    }\n    const [windowSize, setWindowSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        if (initializeWithValue) {\n            return {\n                width: window.innerWidth,\n                height: window.innerHeight\n            };\n        }\n        return {\n            width: void 0,\n            height: void 0\n        };\n    });\n    const debouncedSetWindowSize = useDebounceCallback(setWindowSize, options == null ? void 0 : options.debounceDelay);\n    function handleSize() {\n        const setSize = (options == null ? void 0 : options.debounceDelay) ? debouncedSetWindowSize : setWindowSize;\n        setSize({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    }\n    useEventListener(\"resize\", handleSize);\n    useIsomorphicLayoutEffect(()=>{\n        handleSize();\n    }, []);\n    return windowSize;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/usehooks-ts/dist/index.mjs\n");

/***/ })

};
;